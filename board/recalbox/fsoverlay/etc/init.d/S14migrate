#!/bin/bash

# This file runs migration scripts at each boot.
#
# Because they are run more than once, each migration must be *idempotent*.
# Running them at each boot ensures that even configurations stored on external
# USB drives will get migrated too.
#
# TODO: each migration should be in a separate timestamped file to ensure they
#       are executed in order and properly isolated. So far, they are just
#       declared in order, and assigned an incremental index (the currently
#       informative timestamp is generated with `date +%Y%m%d%H%M%S`).

# Run this script on startup only
if [[ $1 != "start" ]]; then
  exit 0
fi

# Useful global variables
_SHAREINIT="/recalbox/share_init"
_SHARE="/recalbox/share"
_ARCH=$(cat /recalbox/recalbox.arch)
INIT_SCRIPT=$(basename "$0")

# Significant files paths
recalboxConfPath="system/recalbox.conf"
esInputCfgPath="system/.emulationstation/es_input.cfg"

##########################
###     Migrations     ###
##########################

recallog -s "${INIT_SCRIPT}" -t "MIGRATION" "Running MIGRATIONS..."

### Migration 0 [20190322135434]
# Change cores that have been renamed in bf151a1

declare -A renamedCores
renamedCores=([catsfc]=snes9x2005 [pocketsnes]=snes9x2002 [snes9x_next]=snes9x2010 [pce]=mednafen_pce_fast [vb]=mednafen_vb [imame]=mame2000 [mame078]=mame2003 [fba]=fbneo [fbalpha]=fbneo [glupen64]=mupen64plus [4do]=opera)
for oldCoreName in ${!renamedCores[@]}; do 
  sed -i "s/\.core=${oldCoreName}\s*$/.core=${renamedCores[${oldCoreName}]}/" $_SHARE/${recalboxConfPath} \
    || { recallog -s "${INIT_SCRIPT}" -t "MIGRATION-ERROR" "couldn't replace '${oldCoreName}' by '${renamedCores[${oldCoreName}]}' in $_SHARE/${recalboxConfPath}."; exit 1; }
done

### Migration 2 [20190330205033]
# Ugrade es_input.cfg for Virtual Gamepad

sed -i \
  's/deviceGUID="03000000030000000300000002000000">/deviceGUID="03000000030000000300000002000000" deviceNbAxes="2" deviceNbHats="0" deviceNbButtons="8">/g' \
  $_SHARE/${esInputCfgPath} \
  || { recallog -s "${INIT_SCRIPT}" -t "MIGRATION-ERROR" "failed to update Virtual Gamepad in 'es_input.cfg'."; exit 1; }

### Migration 3 [20190409115114]
#  Use `es_system.cfg` from SHARE_INIT if the one in SHARE is invalid

if ! xmllint --noout --relaxng /recalbox/scripts/es_input.rng $_SHARE/${esInputCfgPath}; then
  mv -f $_SHARE/${esInputCfgPath}{,.invalid} && cp {$_SHAREINIT,$_SHARE}/${esInputCfgPath} \
    && recallog -s "${INIT_SCRIPT}" -t "MIGRATION-INFO" "RETIRED invalid or obsolete 'es_input.cfg' to $_SHARE/${esInputCfgPath}.invalid. Default one is now used instead." \
    || { recallog -s "${INIT_SCRIPT}" -t "MIGRATION-ERROR" "failed to retire invalid 'es_input.cfg' file."; exit 1; }
fi

### Migration 4 [20190422170104]
# Force use of webmanager v2, if v1 is configured

sed -i \
  -e 's/## 1 or 2, depending on the manager version you wish/## Currently, only version 2 is available/g' \
  -e 's/system.manager.version=1\s*$/system.manager.version=2/g' \
  $_SHARE/${recalboxConfPath} \
    || { recallog -s "${INIT_SCRIPT}" -t "MIGRATION-ERROR" "couldn't change webmanager version in $_SHARE/${recalboxConfPath}."; exit 1; }

### Migration 5 [20200322100000]
# Change systems that have been renamed
declare -A renamedSystems
renamedSystems=([prboom]=doom [fba_libretro]=fbneo)
mount -o remount,rw /
for oldSystemName in ${!renamedSystems[@]}; do
  sed -i "s/^${oldSystemName}./${renamedSystems[${oldSystemName}]}./" $_SHARE/${recalboxConfPath} \
    || { recallog -s "${INIT_SCRIPT}" -t "MIGRATION-ERROR" "couldn't replace '${oldSystemName}' by '${renamedSystems[${oldSystemName}]}' in $_SHARE/${recalboxConfPath}."; exit 1; }
  for dir in $_SHARE/themes/*/${oldSystemName}/ ; do if [ -e "${dir}" ] ; then mv "${dir}" "$(dirname "$dir")/${renamedSystems[${oldSystemName}]}" \
    && recallog -s "${INIT_SCRIPT}" -t "MIGRATION-INFO" "RENAMED '${oldSystemName}' system to '${renamedSystems[${oldSystemName}]}' in ${dir}." \
    || { recallog -s "${INIT_SCRIPT}" -t "MIGRATION-ERROR" "couldn't rename '${oldSystemName}' to '${renamedSystems[${oldSystemName}]}' in ${dir}."; }; fi ; done
  for dir in $_SHARE/saves/${oldSystemName}/ ; do if [ -e "${dir}" ] ; then mv "${dir}" "$(dirname "$dir")/${renamedSystems[${oldSystemName}]}" \
    && recallog -s "${INIT_SCRIPT}" -t "MIGRATION-INFO" "RENAMED '${oldSystemName}' system to '${renamedSystems[${oldSystemName}]}' in ${dir}." \
    || { recallog -s "${INIT_SCRIPT}" -t "MIGRATION-ERROR" "couldn't rename '${oldSystemName}' to '${renamedSystems[${oldSystemName}]}' in ${dir}."; }; fi ; done
  for dir in $_SHARE/roms/${oldSystemName}/ ; do if [ -e "${dir}" ] ; then mv "${dir}" "$(dirname "$dir")/${renamedSystems[${oldSystemName}]}" \
    && recallog -s "${INIT_SCRIPT}" -t "MIGRATION-INFO" "RENAMED '${oldSystemName}' system to '${renamedSystems[${oldSystemName}]}' in ${dir}." \
    || { recallog -s "${INIT_SCRIPT}" -t "MIGRATION-ERROR" "couldn't rename '${oldSystemName}' to '${renamedSystems[${oldSystemName}]}' in ${dir}."; }; fi ; done
  for dir in $_SHARE/system/.emulationstation/themes/*/${oldSystemName}/ ; do if [ -e "${dir}" ] ; then mv "${dir}" "$(dirname "$dir")/${renamedSystems[${oldSystemName}]}" \
    && recallog -s "${INIT_SCRIPT}" -t "MIGRATION-INFO" "RENAMED '${oldSystemName}' system to '${renamedSystems[${oldSystemName}]}' in ${dir}." \
    || { recallog -s "${INIT_SCRIPT}" -t "MIGRATION-ERROR" "couldn't rename '${oldSystemName}' to '${renamedSystems[${oldSystemName}]}' in ${dir}."; }; fi ; done
  for dir in $_SHAREINIT/themes/*/${oldSystemName}/ ; do if [ -e "${dir}" ] ; then mv "${dir}" "$(dirname "$dir")/${renamedSystems[${oldSystemName}]}" \
    && recallog -s "${INIT_SCRIPT}" -t "MIGRATION-INFO" "RENAMED '${oldSystemName}' system to '${renamedSystems[${oldSystemName}]}' in ${dir}." \
    || { recallog -s "${INIT_SCRIPT}" -t "MIGRATION-ERROR" "couldn't rename '${oldSystemName}' to '${renamedSystems[${oldSystemName}]}' in ${dir}."; }; fi ; done
  for dir in $_SHAREINIT/saves/${oldSystemName}/ ; do if [ -e "${dir}" ] ; then mv "${dir}" "$(dirname "$dir")/${renamedSystems[${oldSystemName}]}" \
    && recallog -s "${INIT_SCRIPT}" -t "MIGRATION-INFO" "RENAMED '${oldSystemName}' system to '${renamedSystems[${oldSystemName}]}' in ${dir}." \
    || { recallog -s "${INIT_SCRIPT}" -t "MIGRATION-ERROR" "couldn't rename '${oldSystemName}' to '${renamedSystems[${oldSystemName}]}' in ${dir}."; }; fi ; done
  for dir in $_SHAREINIT/roms/${oldSystemName}/ ; do if [ -e "${dir}" ] ; then mv "${dir}" "$(dirname "$dir")/${renamedSystems[${oldSystemName}]}" \
    && recallog -s "${INIT_SCRIPT}" -t "MIGRATION-INFO" "RENAMED '${oldSystemName}' system to '${renamedSystems[${oldSystemName}]}' in ${dir}." \
    || { recallog -s "${INIT_SCRIPT}" -t "MIGRATION-ERROR" "couldn't rename '${oldSystemName}' to '${renamedSystems[${oldSystemName}]}' in ${dir}."; }; fi ;done
  for dir in $_SHAREINIT/system/.emulationstation/themes/*/${oldSystemName}/ ; do if [ -e "${dir}" ] ; then mv "${dir}" "$(dirname "$dir")/${renamedSystems[${oldSystemName}]}" \
    && recallog -s "${INIT_SCRIPT}" -t "MIGRATION-INFO" "RENAMED '${oldSystemName}' system to '${renamedSystems[${oldSystemName}]}' in ${dir}." \
    || { recallog -s "${INIT_SCRIPT}" -t "MIGRATION-ERROR" "couldn't rename '${oldSystemName}' to '${renamedSystems[${oldSystemName}]}' in ${dir}."; }; fi ; done
done
mount -o remount,ro /


### Migration 6 [20210617165703]
### Copy all psp saves to the new directory : see https://gitlab.com/recalbox/recalbox/-/issues/1773
PSPSAVEDIR="/recalbox/share/saves/psp/ppsspp/PSP/"
mkdir -p "${PSPSAVEDIR}"

for SAVE_DIR in "SAVEDATA" "PPSSPP_STATE"; do
  if [ ! -z "$(ls -A /recalbox/share/system/configs/ppsspp/PSP/${SAVE_DIR}/)" ]; then
    recallog -s "${INIT_SCRIPT}" -t "MIGRATION-INFO" "MIGRATION of PPSSPP saves from /recalbox/share/system/configs/ppsspp/PSP/${SAVE_DIR}/ to /recalbox/share/saves/psp/ppsspp/PSP/"
    cp -r "/recalbox/share/system/configs/ppsspp/PSP/${SAVE_DIR}/" "${PSPSAVEDIR}" && \
    rm -rf "/recalbox/share/system/configs/ppsspp/PSP/${SAVE_DIR}/"
  fi
done
