diff --git a/joystick.c b/joystick.c
index 63e5a20..bc97782 100644
--- a/joystick.c
+++ b/joystick.c
@@ -144,6 +144,27 @@ Sint16 joy_keyname_to_sym( char *name )
   return 0;
 }
 
+int get_joyindex_from_joyname(char* joyname, int defaultjoy)
+{
+  int i;
+
+  if( !joysubinited )
+  {
+    if( SDL_InitSubSystem( SDL_INIT_JOYSTICK ) != 0 ) return defaultjoy;
+    joysubinited = SDL_TRUE;
+  }
+
+  SDL_JoystickUpdate();
+  int num = SDL_NumJoysticks();
+  for (i = 0 ; i < num ; i++)
+  {
+    const char* name = SDL_JoystickNameForIndex(i);
+    if (strcasecmp(joyname, name) == 0)
+      return JOYMODE_SDL0 + i;
+  }
+  return defaultjoy;
+}
+
 static SDL_bool dojoyevent( SDL_Event *ev, struct machine *oric, Sint16 mode, Uint8 *joystate, SDL_Joystick *sjoy )
 {
   Sint32 i;
@@ -236,16 +257,33 @@ static SDL_bool dojoyevent( SDL_Event *ev, struct machine *oric, Sint16 mode, Ui
           break;
 
         case SDL_JOYBUTTONDOWN:
-          if( ev->jbutton.which != (mode-JOYMODE_SDL0) ) return SDL_FALSE;
-          joystate[4+(ev->jbutton.button % 3)] = 1;
-          swallowit = SDL_TRUE;
-          break;
-
         case SDL_JOYBUTTONUP:
+        {
           if( ev->jbutton.which != (mode-JOYMODE_SDL0) ) return SDL_FALSE;
-          joystate[4+(ev->jbutton.button % 3)] = 0;
+
+          int pressed = (ev->type == SDL_JOYBUTTONDOWN) ? 1 : 0;
+          int* map = (oric->joymode_a == mode) ? oric->mapjoy1 : oric->mapjoy2;
+          int b = ev->jbutton.button;
+
+          if (b == map[0]) joystate[4 + 0] = pressed;
+          else if (b == map[1]) joystate[4 + 1] = pressed;
+          else
+          {
+            int* hkeystart = (oric->joymode_a == mode) ? oric->hkeystart1 : oric->hkeystart2;
+            if (b == map[2]) hkeystart[0] = pressed;
+            else if (b == map[3]) hkeystart[1] = pressed;
+
+            // Exit?
+            if (hkeystart[0] == pressed)
+              if (hkeystart[1] == pressed)
+              {
+                SDL_Event event = {SDL_QUIT};
+                SDL_PushEvent(&event);
+              }
+          }
+
           swallowit = SDL_TRUE;
-          break;
+        }
       }
       break;
   }
diff --git a/joystick.h b/joystick.h
index f1bd63a..3904eac 100644
--- a/joystick.h
+++ b/joystick.h
@@ -43,7 +43,8 @@ enum
   JOYMODE_SDL7,
   JOYMODE_SDL8,
   JOYMODE_SDL9,
-  JOYMODE_MOUSE
+  JOYMODE_MOUSE,
+  JOYMODE_NAMED
 };
 
 SDL_bool init_joy( struct machine *oric );
@@ -53,3 +54,4 @@ Sint16 joy_keyname_to_sym( char *name );
 void joy_setup( struct machine *oric );
 SDL_bool joy_filter_event( SDL_Event *ev, struct machine *oric );
 void joy_buildmask( struct machine *oric );
+int get_joyindex_from_joyname(char* joyname, int defaultjoy);
diff --git a/machine.c b/machine.c
index 98d395d..cc8e775 100644
--- a/machine.c
+++ b/machine.c
@@ -1144,6 +1144,10 @@ void preinit_machine( struct machine *oric )
   oric->joymode_b = JOYMODE_NONE;
   oric->telejoymode_a = JOYMODE_KB1;
   oric->telejoymode_b = JOYMODE_NONE;
+  memset(oric->mapjoy1, -1, sizeof(oric->mapjoy1));
+  memset(oric->mapjoy2, -1, sizeof(oric->mapjoy2));
+  memset(oric->hkeystart1, -1, sizeof(oric->hkeystart1));
+  memset(oric->hkeystart2, -1, sizeof(oric->hkeystart2));
 
   oric->porta_joy = 0xff;
   oric->porta_ay  = 0;
diff --git a/machine.h b/machine.h
index 9780b4c..3e07465 100644
--- a/machine.h
+++ b/machine.h
@@ -241,6 +241,8 @@ struct machine
   Sint32 joymode_a, joymode_b;
   Sint32 telejoymode_a, telejoymode_b;
   SDL_COMPAT_KEY kbjoy1[7], kbjoy2[7];
+  int mapjoy1[4], mapjoy2[4];
+  int hkeystart1[2], hkeystart2[2];
 
   SDL_bool printenable;
   SDL_bool printfilter;
diff --git a/main.c b/main.c
index 5b0bac7..4bca1aa 100644
--- a/main.c
+++ b/main.c
@@ -169,6 +169,7 @@ static char *joymodes[] = { "none",
                             "sdljoy8",
                             "sdljoy9",
                             "mouse",
+                            "sdlnamedjoy",
                             NULL };
 
 static char *rendermodes[] = { "{{INVALID}}",
@@ -403,6 +404,10 @@ static void load_config( struct start_opts *sto, struct machine *oric )
   Sint32 i, j;
   char tbtmp[32];
   char keymap_file[4096];
+  char joy_name1[256];
+  char joy_name2[256];
+  memset(joy_name1, 0, sizeof(joy_name1));
+  memset(joy_name2, 0, sizeof(joy_name2));
 
   f = fopen( "/recalbox/share/system/.config/oricutron.cfg", "r" );
   if( !f ) return;
@@ -509,6 +514,8 @@ static void load_config( struct start_opts *sto, struct machine *oric )
     if( read_config_option( &sto->lctmp[i], "joyinterface", &oric->joy_iface, joyifacetypes ) ) continue;
     if( read_config_option( &sto->lctmp[i], "joystick_a",   &oric->joymode_a,     joymodes ) ) continue;
     if( read_config_option( &sto->lctmp[i], "joystick_b",   &oric->joymode_b,     joymodes ) ) continue;
+    if( read_config_string( &sto->lctmp[i], "joystick_name_a", joy_name1, 256 ) ) continue;
+    if( read_config_string( &sto->lctmp[i], "joystick_name_b", joy_name2, 256 ) ) continue;
     if( read_config_option( &sto->lctmp[i], "telejoy_a",    &oric->telejoymode_a, joymodes ) ) continue;
     if( read_config_option( &sto->lctmp[i], "telejoy_b",    &oric->telejoymode_b, joymodes ) ) continue;
     if( read_config_joykey( &sto->lctmp[i], "kbjoy1_up",    &oric->kbjoy1[0] ) ) continue;
@@ -525,6 +532,14 @@ static void load_config( struct start_opts *sto, struct machine *oric )
     if( read_config_joykey( &sto->lctmp[i], "kbjoy2_fire1", &oric->kbjoy2[4] ) ) continue;
     if( read_config_joykey( &sto->lctmp[i], "kbjoy2_fire2", &oric->kbjoy2[5] ) ) continue;
     if( read_config_joykey( &sto->lctmp[i], "kbjoy2_fire3", &oric->kbjoy2[6] ) ) continue;
+    if( read_config_int   ( &sto->lctmp[i], "sdljoy1_hkey",  &oric->mapjoy1[2], -1, 63 ) ) continue;
+    if( read_config_int   ( &sto->lctmp[i], "sdljoy1_start", &oric->mapjoy1[3], -1, 63) ) continue;
+    if( read_config_int   ( &sto->lctmp[i], "sdljoy2_hkey",  &oric->mapjoy2[2], -1, 63 ) ) continue;
+    if( read_config_int   ( &sto->lctmp[i], "sdljoy2_start", &oric->mapjoy2[3], -1, 63 ) ) continue;
+    if( read_config_int   ( &sto->lctmp[i], "sdljoy1_fire1", &oric->mapjoy1[0], -1, 63 ) ) continue;
+    if( read_config_int   ( &sto->lctmp[i], "sdljoy1_fire2", &oric->mapjoy1[1], -1, 63 ) ) continue;
+    if( read_config_int   ( &sto->lctmp[i], "sdljoy2_fire1", &oric->mapjoy2[0], -1, 63 ) ) continue;
+    if( read_config_int   ( &sto->lctmp[i], "sdljoy2_fire2", &oric->mapjoy2[1], -1, 63 ) ) continue;
     if( read_config_bool(   &sto->lctmp[i], "diskautosave", &oric->diskautosave ) ) continue;
     if( read_config_bool(   &sto->lctmp[i], "ch376",        &oric->ch376_activated) ) continue;
     if( read_config_bool(   &sto->lctmp[i], "twilighte_board",&oric->twilighteboard_activated) ) continue;
@@ -541,6 +556,16 @@ static void load_config( struct start_opts *sto, struct machine *oric )
     }
   }
 
+  // Adjust joysticks
+  if (oric->joymode_a == JOYMODE_NAMED)
+    oric->joymode_a = get_joyindex_from_joyname(joy_name1, JOYMODE_SDL0);
+  if (oric->joymode_b == JOYMODE_NAMED)
+    oric->joymode_b = get_joyindex_from_joyname(joy_name2, JOYMODE_SDL1);
+  if (oric->telejoymode_a == JOYMODE_NAMED)
+    oric->telejoymode_a = get_joyindex_from_joyname(joy_name1, JOYMODE_SDL0);
+  if (oric->telejoymode_b == JOYMODE_NAMED)
+    oric->telejoymode_b = get_joyindex_from_joyname(joy_name2, JOYMODE_SDL1);
+
   fclose( f );
 }
 
@@ -702,7 +727,7 @@ SDL_bool init( struct machine *oric, int argc, char *argv[] )
   kbd_init(oric);
 
   // Go SDL!
-  if( SDL_Init( SDL_INIT_VIDEO | SDL_INIT_AUDIO ) < 0 )
+  if( SDL_Init( SDL_INIT_EVERYTHING ) < 0 )
   {
     error_printf( "SDL init failed" );
     free( sto );
