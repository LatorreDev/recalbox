diff --git a/Core/KeyMap.cpp b/Core/KeyMap.cpp
index 8d9408770..b81aa5d60 100644
--- a/Core/KeyMap.cpp
+++ b/Core/KeyMap.cpp
@@ -687,6 +687,7 @@ const KeyMap_IntStrPair psp_button_names[] = {
 	{VIRTKEY_SAVE_STATE, "Save State"},
 	{VIRTKEY_LOAD_STATE, "Load State"},
 	{VIRTKEY_NEXT_SLOT,  "Next Slot"},
+	{VIRTKEY_PREVIOUS_SLOT,  "Previous Slot"},
 #if !defined(MOBILE_DEVICE)
 	{VIRTKEY_TOGGLE_FULLSCREEN, "Toggle Fullscreen"},
 #endif
diff --git a/Core/KeyMap.h b/Core/KeyMap.h
index a0afd7479..cacca52d5 100644
--- a/Core/KeyMap.h
+++ b/Core/KeyMap.h
@@ -61,6 +61,7 @@ enum {
 	VIRTKEY_OPENCHAT = 0x4000001D,
 	VIRTKEY_ANALOG_ROTATE_CW = 0x4000001E,
 	VIRTKEY_ANALOG_ROTATE_CCW = 0x4000001F,
+	VIRTKEY_PREVIOUS_SLOT = 0x40000020,
 	VIRTKEY_LAST,
 	VIRTKEY_COUNT = VIRTKEY_LAST - VIRTKEY_FIRST
 };
diff --git a/Core/SaveState.cpp b/Core/SaveState.cpp
index d0388bb36..20d418f4f 100644
--- a/Core/SaveState.cpp
+++ b/Core/SaveState.cpp
@@ -436,6 +436,11 @@ namespace SaveState
 		g_Config.iCurrentStateSlot = (g_Config.iCurrentStateSlot + 1) % NUM_SLOTS;
 	}
 
+	void PreviousSlot()
+	{
+		g_Config.iCurrentStateSlot = (g_Config.iCurrentStateSlot - 1) % NUM_SLOTS;
+	}
+
 	void LoadSlot(const std::string &gameFilename, int slot, Callback callback, void *cbUserData)
 	{
 		std::string fn = GenerateSaveSlotFilename(gameFilename, slot, STATE_EXTENSION);
diff --git a/Core/SaveState.h b/Core/SaveState.h
index f2c1a3a42..1727c8c9e 100644
--- a/Core/SaveState.h
+++ b/Core/SaveState.h
@@ -41,6 +41,7 @@ namespace SaveState
 
 	// Cycle through the 5 savestate slots
 	void NextSlot();
+	void PreviousSlot();
 	void SaveSlot(const std::string &gameFilename, int slot, Callback callback, void *cbUserData = 0);
 	void LoadSlot(const std::string &gameFilename, int slot, Callback callback, void *cbUserData = 0);
 	bool UndoSaveSlot(const std::string &gameFilename, int slot);
diff --git a/SDL/SDLJoystick.cpp b/SDL/SDLJoystick.cpp
index 1dfedeac5..bd5ca45e9 100644
--- a/SDL/SDLJoystick.cpp
+++ b/SDL/SDLJoystick.cpp
@@ -1,5 +1,7 @@
 #include <iostream>
 #include <string>
+#include <algorithm>
+#include <sstream>
 
 #include "Common/System/NativeApp.h"
 #include "Common/System/System.h"
@@ -11,6 +13,10 @@
 
 using namespace std;
 
+static bool hotkey = false;
+static bool hotkeyIsNotADedicatedKey = false;
+keycode_t guideCode;
+
 static int SDLJoystickEventHandlerWrapper(void* userdata, SDL_Event* event)
 {
 	static_cast<SDLJoystick *>(userdata)->ProcessInput(*event);
@@ -49,6 +55,10 @@ void SDLJoystick::setUpControllers() {
 	}
 	if (controllers.size() > 0) {
 		cout << "pad 1 has been assigned to control pad: " << SDL_GameControllerName(controllers.front()) << endl;
+		auto mapping = SDL_GameControllerMapping(controllers.front());
+		// Check with mapping if guide and select have the same button, and turn on a flag
+		guideCode = findGuideRealButton(mapping);
+		hotkeyIsNotADedicatedKey = ( guideCode != NKCODE_UNKNOWN );
 	}
 }
 
@@ -153,7 +163,12 @@ void SDLJoystick::ProcessInput(SDL_Event &event){
 				key.flags = KEY_DOWN;
 				key.keyCode = code;
 				key.deviceId = DEVICE_ID_PAD_0 + getDeviceIndex(event.cbutton.which);
+				keysPressedCombo.push_back(code);
 				NativeKey(key);
+				if (hotkeyIsNotADedicatedKey and (code == guideCode)) {
+					key.keyCode = NKCODE_BACK;
+					NativeKey(key);
+				}
 			}
 		}
 		break;
@@ -166,6 +181,10 @@ void SDLJoystick::ProcessInput(SDL_Event &event){
 				key.keyCode = code;
 				key.deviceId = DEVICE_ID_PAD_0 + getDeviceIndex(event.cbutton.which);
 				NativeKey(key);
+				if (code == NKCODE_BUTTON_9 and hotkeyIsNotADedicatedKey) {
+					key.keyCode = NKCODE_BACK;
+					NativeKey(key);
+				}
 			}
 		}
 		break;
@@ -196,6 +215,10 @@ void SDLJoystick::ProcessInput(SDL_Event &event){
 		setUpController(event.cdevice.which);
 		if (prevNumControllers == 0 && controllers.size() > 0) {
 			cout << "pad 1 has been assigned to control pad: " << SDL_GameControllerName(controllers.front()) << endl;
+			auto mapping = SDL_GameControllerMapping(controllers.front());
+			// Check with mapping if guide and select have the same button, and turn on a flag
+			guideCode = findGuideRealButton(mapping);
+			hotkeyIsNotADedicatedKey = ( guideCode != NKCODE_UNKNOWN );
 		}
 		break;
 	}
@@ -209,3 +232,29 @@ int SDLJoystick::getDeviceIndex(int instanceId) {
 	}
 	return it->second;
 }
+
+// Hack for people whose HK is not a dedicated button
+keycode_t SDLJoystick::findGuideRealButton(const char* mapping) {
+	std::string s, guideStringCode, guideString;
+	std::istringstream f(mapping);
+	size_t pos;
+
+	while (getline(f, s, ',')) {
+		if (pos=s.find("guide:b") != std::string::npos) {
+			guideString = s;
+			guideStringCode = s.substr(7); // thats length of guide:b
+			break;
+		}
+	}
+
+	s.clear();
+	while (getline(f, s, ',')) {
+		if (pos=s.find(guideStringCode) != std::string::npos and s != guideString) {
+			s = s.substr(0, s.find(':'));
+			if (pos=s.find("back") != std::string::npos) { return NKCODE_BUTTON_9; }
+			if (pos=s.find("leftstick") != std::string::npos) { return NKCODE_BUTTON_THUMBL; }
+			if (pos=s.find("rightstick") != std::string::npos) { return NKCODE_BUTTON_THUMBR; }
+		}
+	}
+	return NKCODE_UNKNOWN;
+}
diff --git a/SDL/SDLJoystick.h b/SDL/SDLJoystick.h
index 057e332b2..7a9526e9b 100644
--- a/SDL/SDLJoystick.h
+++ b/SDL/SDLJoystick.h
@@ -27,4 +27,7 @@ class SDLJoystick{
 	bool registeredAsEventHandler;
 	std::vector<SDL_GameController *> controllers;
 	std::map<int, int> controllerDeviceMap;
+	std::vector<keycode_t> keysPressedCombo;
+	bool checkGuideCombo();
+	keycode_t findGuideRealButton(const char* mapping);
 };
diff --git a/UI/EmuScreen.cpp b/UI/EmuScreen.cpp
index 7ddf06d16..27f8ccf99 100644
--- a/UI/EmuScreen.cpp
+++ b/UI/EmuScreen.cpp
@@ -95,6 +95,7 @@ UI::ChoiceWithValueDisplay *chatButtons;
 static bool frameStep_;
 static int lastNumFlips;
 static bool startDumping;
+static bool hkPressed;
 
 extern bool g_TakeScreenshot;
 
@@ -538,7 +539,7 @@ void EmuScreen::onVKeyDown(int virtualKeyCode) {
 		break;
 
 	case VIRTKEY_PAUSE:
-		pauseTrigger_ = true;
+		hkPressed = true;
 		break;
 
 	case VIRTKEY_FRAME_ADVANCE:
@@ -636,6 +637,10 @@ void EmuScreen::onVKeyDown(int virtualKeyCode) {
 		SaveState::NextSlot();
 		NativeMessageReceived("savestate_displayslot", "");
 		break;
+	case VIRTKEY_PREVIOUS_SLOT:
+		SaveState::PreviousSlot();
+		NativeMessageReceived("savestate_displayslot", "");
+		break;
 	case VIRTKEY_TOGGLE_FULLSCREEN:
 		System_SendMessage("toggle_fullscreen", "");
 		break;
@@ -740,11 +745,63 @@ void EmuScreen::onVKeyUp(int virtualKeyCode) {
 		__CtrlSetAnalogY(0.0f, 0);
 		break;
 
+	case VIRTKEY_PAUSE:
+		hkPressed = false;
+		break;
+
 	default:
 		break;
 	}
 }
 
+bool EmuScreen::checkCombos(u32 buttons) {
+	if (!hkPressed) {
+		INFO_LOG(SYSTEM, "HK not pressed");
+		return false;
+	}
+
+	bool retval = false;
+
+	if (buttons & CTRL_CROSS) {
+		pauseTrigger_ = true;
+		retval =  true;
+	}
+	if (buttons & CTRL_START) {
+		System_SendMessage("finish", "");
+		retval =  true;
+	}
+	if (buttons & CTRL_CIRCLE) {
+		sendMessage("reset", "");
+		retval =  true;
+	}
+	if (buttons & CTRL_SQUARE) {
+		onVKeyDown(VIRTKEY_SAVE_STATE);
+		retval =  true;
+	}
+	if (buttons & CTRL_TRIANGLE) {
+		onVKeyDown(VIRTKEY_LOAD_STATE);
+		retval =  true;
+	}
+	if (buttons & CTRL_UP) {
+		onVKeyDown(VIRTKEY_NEXT_SLOT);
+		retval =  true;
+	}
+	if (buttons & CTRL_DOWN) {
+		onVKeyDown(VIRTKEY_PREVIOUS_SLOT);
+		retval =  true;
+	}
+	if (buttons & CTRL_LEFT) {
+		onVKeyDown(VIRTKEY_REWIND);
+		retval =  true;
+	}
+	if (buttons & CTRL_RIGHT) {
+		onVKeyDown(VIRTKEY_SPEED_TOGGLE);
+		retval =  true;
+	}
+	hkPressed = false;
+	return retval;
+}
+
 // Handles control rotation due to internal screen rotation.
 static void SetPSPAxis(char axis, float value, int stick) {
 	switch (g_Config.iInternalScreenRotation) {
@@ -858,8 +915,9 @@ void EmuScreen::pspKey(int pspKeyCode, int flags) {
 		}
 	} else {
 		// INFO_LOG(SYSTEM, "pspKey %i %i", pspKeyCode, flags);
-		if (flags & KEY_DOWN)
-			__CtrlButtonDown(pspKeyCode);
+		if (flags & KEY_DOWN) {
+			if (! checkCombos(pspKeyCode)) __CtrlButtonDown(pspKeyCode);
+		}
 		if (flags & KEY_UP)
 			__CtrlButtonUp(pspKeyCode);
 	}
diff --git a/UI/EmuScreen.h b/UI/EmuScreen.h
index 69befa43b..ab1fbba23 100644
--- a/UI/EmuScreen.h
+++ b/UI/EmuScreen.h
@@ -66,6 +66,7 @@ class EmuScreen : public UIScreen {
 	void pspKey(int pspKeyCode, int flags);
 	void onVKeyDown(int virtualKeyCode);
 	void onVKeyUp(int virtualKeyCode);
+	bool checkCombos(u32 buttons);
 	void setVKeyAnalogX(int stick, int virtualKeyMin, int virtualKeyMax);
 	void setVKeyAnalogY(int stick, int virtualKeyMin, int virtualKeyMax);
 
